/** This is an implementation of the rod-cutting problem. The rod-cut-
 *  ting problem asks for the maximum revenue generated by cutting a 
 *  rod of length n into pieces and selling them, where each piece 
 *  less than n or equal to n has some price associated to it.
 */
#include <vector>
#include <iostream>
#include <limits>
#include <utility>
#include <unordered_map>

using namespace std;

int max(int a, int b) {
    return a > b ? a : b;
}

// sample prices for a rod of index i
vector<int> prices = {1,5,8,9,10,17,17,20,24,30};
unordered_map<int,int> memo;


// bottom-up implementation that reconstructs the solution
pair<int,int> rod_cutting_up_reconstruct(int n){
    int r = 0;
    int s = 0;
    for(int i=1; i<=n; i++){
        r = numeric_limits<int>::min();
        for(int j=1; j<=i; j++){
            if(j==i){
                if(r < prices[i-1]){
                    r = prices[i-1];
                    s = j;
                }
            }
            if (r < memo[j] + memo[i-j]){
                r = memo[j] + memo[i-j];
                s = j;
            }
        }
        memo[i] = r;
    }
    return make_pair(memo[n],s);   
}


// bottom-up implementation using iteration and no recursion
int rod_cutting_up(int n){
    int r = 0;
    for(int i=1; i<=n; i++){
        r = numeric_limits<int>::min();
        for(int j=1; j<=i; j++){
            if(j==i){
                r = max(r, prices[i-1]);
            }
            r = max(r, memo[j] + memo[i-j]);
        }
        memo[i] = r;
    }
    return memo[n];   
}

// top-down recursive implementation
int rod_cutting_down(int n){
    if(memo.find(n)!=memo.end()){
        return memo.at(n);
    }
    else{
        int q = numeric_limits<int>::min();
        for(int i=1; i<=n; i++){
            q = max(q, prices[i-1] + rod_cutting_down(n-i));
        }
        return q;
    }
}

int main(){
    memo[0] = 0;
    for(int i=1; i<11; i++){
        cout<<rod_cutting_down(i)<<endl;
    }
    memo.clear();
    memo[0] = 0;
    for(int i=1; i<11; i++){
        cout<<rod_cutting_up(i)<<endl;
    }
    memo.clear();
    memo[0] = 0;
    for(int i=1; i<11; i++){
        cout<<rod_cutting_up_reconstruct(i).first<<" "<<
        rod_cutting_up_reconstruct(i).second<<endl;
    }
            

}

